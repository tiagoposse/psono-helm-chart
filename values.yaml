imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# -- ingress Config
ingress:
  enabled: false
  class: ""
  annotations: []
  hosts:
    # Paths are based on the active modules, do not include here
    - host: ""

# -- Secret Creation Config
# Set options to Generate a Secret on first install
# It will only run if you install the chart for the first time!
# The following Secrets will be created
# PSONO_SECRET_KEY
# PSONO_ACTIVATION_LINK_SECRET
# PSONO_DB_SECRET
# PSONO_EMAIL_SECRET_SALT
# PSONO_PRIVATE_KEY
# PSONO_PUBLIC_KEY
secrets:
  # Set to false if you have your own secrets.
  # If you have predefined values, you can mount them in the sections below
  # or define them in the env section or provide the name of the secret here.
  create: true
  # Set the Name of the generated secrets.
  name: "psono-deploy-secrets"

# -- Database credentials from Secret
databaseSecret:
  # -- enables or disables the secret to be used
  enabled: false
  # -- secret name
  name: "psono-postgres-secret"
  # -- Username Key Name
  usernameKey: "username"
  # -- Password Key Name
  passwordKey: "password"

# -- PSONO Server Configuration
server:
  enabled: true
  replicas: 1
  image:
    repository: psono/psono-server
    pullPolicy: IfNotPresent
    tag: latest

  service:
    type: ClusterIP
    port: 10100

  serviceAccount:
    create: true
    annotations: {}
    name: ""

  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  # Configuring the server is done via env variables. You can add PSONO_var_name to specify
  # the variables listed here: https://doc.psono.com/admin/installation/install-server-ce.html#installation-with-docker
  env: {}
  extraSecretEnvironmentVars: []
  extraVolumeMounts: []
  extraVolumes: []

  envFiles: []

# -- PSONO Web Client Config
webclient:
  enabled: true
  replicas: 1
  image:
    repository: psono/psono-client
    pullPolicy: IfNotPresent
    tag: latest

  service:
    port: 10101

  serviceAccount:
    create: true
    annotations: {}
    name: ""

  extraVolumeMounts: []
  extraVolumes: []

# -- PSONO Admin Client configuration
adminClient:
  enabled: true
  replicas: 1
  image:
    repository: psono/psono-admin-client
    pullPolicy: IfNotPresent
    tag: latest

  # -- Admin Client Service Port
  service:
    port: 10102

  serviceAccount:
    create: true
    annotations: {}
    name: ""

  extraVolumeMounts: []
  extraVolumes: []

# -- Bundled Postgresql config
## Enables or disables the bundled Postgresql Database
## If you are using an external Database disable the component
database:
  enabled: true
  replicas: 1
  image:
    repository: postgres
    pullPolicy: IfNotPresent
    tag: latest

  service:
    port: 5432

  serviceAccount:
    create: true
    annotations: {}
    name: ""

  persistence:
    enabled: false
    storageClass: "-"
    existingClaim: ""
    accessModes:
      - ReadWriteOnce
    size: 10Gi

  env:
    []
    # POSTGRES_PASSWORD:
    # POSTGRES_PASSWORD_FILE:
    # POSTGRES_USER: psono
    # POSTGRES_DB: psono

  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  extraSecretEnvironmentVars: []
  extraVolumeMounts: []
  extraVolumes: []

# Enables the mail subchart, see https://github.com/bokysan/docker-postfix/
# on more info on how to configure it
mail:
  enabled: true

# -- Configures the CronJob to backup the Postgresql and extra Mounts
backup:
  enabled: false
  image:
    repository: postgres
    tag: latest
    pullPolicy: IfNotPresent

  schedule: "00 6 * * *"
  startingDeadlineSeconds: 100
  restartPolicy: OnFailure

  envFiles: []
  env:
    {}
    # BACKUP_TARGET:
    # POSTGRES_USER:
    # POSTGRES_DB:
    # POSTGRES_PASSWORD:
    # POSTGRES_HOST:

  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  extraSecretEnvironmentVars: []
  extraVolumeMounts: []
  extraVolumes: []

  serviceAccount:
    create: true
    annotations: {}
    name: ""
